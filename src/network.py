import struct
import socket

class Network():
    def __init__(self, socket, address):
        self.socket = socket
        self.address = address
        self.recvBuffer = bytearray()


    def recv_packet(self):
        """Returns a single packet, if there is one. Otherwise returns None
        """
        self.recv_bytes()

        packet_length_index = 0
         
        amount_data = len(self.recvBuffer)  # available amount of data to read
        
        if amount_data <= packet_length_index:  # just 0's in the buffer
            return None

        if len(self.recvBuffer) <= packet_length_index + 2:  # length not received
            return None
        
        packet_length = unpack(self.recvBuffer, packet_length_index, 'H')
        
        if packet_length > len(self.recvBuffer):  # packet not fully received
            return None
        
        if packet_length == 0:  # some wrong generated packet by server, inc position of reading packet length
            packet_length_index += 1
            return None

		# extract packet data
        packet = self.recvBuffer[packet_length_index:packet_length_index+packet_length]

        # remaining recv buffer
        self.recvBuffer = self.recvBuffer[packet_length_index + packet_length:]
        packet_length_index = 0  # next packet length should be at pos 0 again

        return packet


    def send_packet(self, p_type, p_format, p_args, init=False):
        """
        Args:
            p_type: packet type (sniffed)
            p_format: The struct type of the packet
            p_parameters: A list contining the required data
        """
        # initialization packet
        if init:
            init_packet = struct.pack("<HBLL", 11, 0xfd, p_type, 0x1993)
            self.send_bytes(init_packet)
            """
            p = b''
            if p_type == SendTYPE.HEART_BEAT:  # 0x01
                p = b'\x36\x00\xfd\x33\x13\x00\x00\xfe\x00\x33\x13\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.CONNECT:  # 0x08
                p = b'\x36\x00\xfd\x6d\x13\x00\x00\x05\x01\x6d\x13\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.ANS_CODE:  # 0x03
                p = b'\x36\x00\xfd\x65\x19\x00\x00\x00\x01\x65\x19\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.LOGIN:  # 0x07
                p = b'\x36\x00\xfd\x73\x0e\x00\x00\x04\x01\x73\x0e\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.LOAD_PLAYER:  # 0x04
                p = b'\x36\x00\xfd\x04\x08\x00\x00\x01\x01\x04\x08\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.GAME_START:  # 0x0d
                p = b'\x36\x00\xfd\x64\x0f\x00\x00\x0a\x01\x64\x0f\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.SHORTCUT:  # 0x87
                p = b'\x36\x00\xfd\x2c\x14\x00\x00\x84\x01\x2c\x14\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.UNKNOWN_LOGIN:  # 0xb7
                p = b''
            elif p_type == SendTYPE.USE_SKILL:  # 0x75
                p = b'\x36\x00\xfd\x99\x21\x00\x00\x72\x01\x99\x21\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.USE_PICK:  # 0xae
                p = b'\x36\x00\xfd\xf2\x25\x00\x00\xab\x01\xf2\x25\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.USE_ITEM:  # 0x40
                p = b'\x36\x00\xfd\xd0\x1f\x00\x00\x3d\x01\xd0\x1f\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.ATTACK:  # 0x10
                p = b'\x36\x00\xfd\xf2\x04\x00\x00\x0d\x01\xf2\x04\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.MOVE:  # 0x5e
                p = b'\x36\x00\xfd\x3b\x25\x00\x00\x5b\x01\x3b\x25\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.MOVE_STOP:  # 0x92
                p = b'\x36\x00\xfd\x59\x05\x00\x00\x8f\x01\x59\x05\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.LOG_OFF:  # 0x8c
                p = b'\x36\x00\xfd\x8e\x0d\x00\x00\x89\x01\x8e\x0d\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.PARTY_REQUEST:  # 0x5a
                p = b'\x36\x00\xfd\x02\x17\x00\x00\x57\x01\x02\x17\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.PARTY_ACCEPT:  # 0x11
                p = b'\x36\x00\xfd\x21\x13\x00\x00\x0e\x01\x21\x13\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.SELL_ITEM:  # 0x7d
                p = b'\x36\x00\xfd\x34\x17\x00\x00\x7a\x01\x34\x17\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.DESTROY_ITEM:  # 0x61
                p = b'\x36\x00\xfd\xae\x0b\x00\x00\x5e\x01\xae\x0b\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.SHOP:  # 0x35
                p = b'\x36\x00\xfd\x55\x18\x00\x00\x32\x01\x55\x18\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.SHOP_OPEN:  #0x20
                p = b''
            elif p_type == SendTYPE.FISHING_START:  # 0x4e
                p = b''
            elif p_type == SendTYPE.LOGIN_AFTER_LOAD:  # 0xfd
                p = b''
            elif p_type == SendTYPE.SEND_MESSAGE:  # 0x38
                p = b'\x36\x00\xfd\xd8\x21\x00\x00\x35\x01\xd8\x21\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.OPEN_WOODENBOX:  #0x9d
                p = b'\x36\x00\xfd\xa3\x25\x00\x00\x9a\x01\xa3\x25\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.SEND_PM:  # 0x29
                p = b'\x36\x00\xfd\x06\x0c\x00\x00\x26\x01\x06\x0c\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            elif p_type == SendTYPE.BLOB_CHANGE:  # 0xff
                p = b'\x36\x00\xfd\x81\x07\x00\x00\xfc\x01\x81\x07\x5a\x44\x51\x78\x5a\x44\x68\x6a\x5a\x44\x6b\x34\x5a\x6a\x41\x77\x59\x6a\x49\x77\x4e\x47\x55\x35\x4f\x44\x41\x77\x4f\x54\x6b\x34\x5a\x57\x4e\x6d\x4f\x44\x51\x79\x4e\x32\x00'
            if p == b'':
                print("Unknown packet. Bot closing!")
                sys.exit()
            self.send_bytes(p)
            """
        # packet
        assert len(p_format) == len(p_args)
        res_data = bytearray()
        for i in range(len(p_format)):
            if  p_format[i] == "s":
                res_data += bytes(p_args[i], 'utf8')
                res_data += b'\x00'
            else:
                form = "<" + p_format[i]  # "<" is little endian byte order
                res_data += struct.pack(form, p_args[i])
        res_data_length = struct.pack("<H", len(res_data) + 1 + 2)
        res_type = struct.pack("B", p_type)
        res_packet = res_data_length + res_type + res_data
        self.send_bytes(res_packet)

    def send_bytes(self, bytearray):
        """Sends a bytearray through socket.
        """
        try:
            self.socket.send(bytearray)
        except:
            # print("Socket broken in send")
            return


    def recv_bytes(self):
        """Receives new bytes from socket.
        """
        try:
            received = self.socket.recv(4096)
            # printf("Bytes received: %d" % (len(received)))
            self.recvBuffer += received
            # printf("recvbuflen=%d" % (len(recvbuf)))
        except BlockingIOError:  # no data available
            return
        except:
            # print("Socket broken in recv")
            return


def unpack(packet, index, unpack_type, unpack_direction="<"):
    length = 0
    if unpack_type == 'b':
        length = 1
    if unpack_type == 'B':
        length = 1
    elif unpack_type == 'H':
        length = 2
    elif unpack_type == 'L':
        length = 4
    assert length > 0
    unpack_mode = unpack_direction + unpack_type
    return struct.unpack(unpack_mode, packet[index:index+length])[0]


def decompile(packet, format, start=3, unpack_direction="<"):
    result = []
    i = start
    for f in format:
        if f == 'B':
            result.append(unpack(packet, i, f))
            i += 1
        elif f == 'b':
            result.append(unpack(packet, i, f))
            i += 1
        elif f == 'H':
            result.append(unpack(packet, i, f))
            i += 2
        elif f == 'L':
            result.append(unpack(packet, i, f))
            i += 4
        elif f == 's':
            j = packet.find(0x00, i)
            result.append(packet[i:j].decode('utf-8'))
            i += (j - i) + 1
    assert len(format) == len(result)
    if len(result) > 1:
        return result
    elif len(result) == 1:
        return result[0]